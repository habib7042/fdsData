-- Fund Management System Database Schema
-- Create tables for FDS with proper structure

-- Drop existing tables if they exist
DROP TABLE IF EXISTS payments;
DROP TABLE IF EXISTS members;
DROP TABLE IF EXISTS users;

-- Create users table
CREATE TABLE users (
  id TEXT PRIMARY KEY,
  email TEXT NOT NULL UNIQUE,
  name TEXT NOT NULL,
  password TEXT NOT NULL,
  role TEXT NOT NULL DEFAULT 'MEMBER' CHECK (role IN ('ACCOUNTANT', 'MEMBER')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create members table
CREATE TABLE members (
  id TEXT PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT NOT NULL UNIQUE,
  phone TEXT,
  address TEXT,
  monthly_amount DECIMAL(10,2) NOT NULL DEFAULT 0.00,
  total_paid DECIMAL(10,2) NOT NULL DEFAULT 0.00,
  total_due DECIMAL(10,2) NOT NULL DEFAULT 0.00,
  is_active BOOLEAN NOT NULL DEFAULT true,
  join_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  user_id TEXT UNIQUE,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL
);

-- Create payments table
CREATE TABLE payments (
  id TEXT PRIMARY KEY,
  amount DECIMAL(10,2) NOT NULL,
  payment_method TEXT NOT NULL CHECK (payment_method IN ('BKASH', 'NAGAD', 'CASH')),
  transaction_id TEXT,
  notes TEXT,
  status TEXT NOT NULL DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'APPROVED', 'REJECTED')),
  submitted_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  verified_at TIMESTAMP WITH TIME ZONE,
  verified_by TEXT,
  member_id TEXT NOT NULL,
  submitted_by TEXT NOT NULL,
  FOREIGN KEY (member_id) REFERENCES members(id) ON DELETE CASCADE,
  FOREIGN KEY (submitted_by) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (verified_by) REFERENCES users(id) ON DELETE SET NULL
);

-- Create indexes for better performance
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_role ON users(role);
CREATE INDEX idx_members_email ON members(email);
CREATE INDEX idx_members_user_id ON members(user_id);
CREATE INDEX idx_payments_member_id ON payments(member_id);
CREATE INDEX idx_payments_status ON payments(status);
CREATE INDEX idx_payments_submitted_by ON payments(submitted_by);

-- Enable RLS (Row Level Security)
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE members ENABLE ROW LEVEL SECURITY;
ALTER TABLE payments ENABLE ROW LEVEL SECURITY;

-- Create policies for users table
CREATE POLICY "Users can view own data" ON users FOR SELECT USING (true);
CREATE POLICY "Users can insert own data" ON users FOR INSERT WITH CHECK (true);
CREATE POLICY "Users can update own data" ON users FOR UPDATE USING (true);

-- Create policies for members table
CREATE POLICY "Members can be viewed by all" ON members FOR SELECT USING (true);
CREATE POLICY "Members can be inserted by all" ON members FOR INSERT WITH CHECK (true);
CREATE POLICY "Members can be updated by all" ON members FOR UPDATE USING (true);

-- Create policies for payments table
CREATE POLICY "Payments can be viewed by all" ON payments FOR SELECT USING (true);
CREATE POLICY "Payments can be inserted by all" ON payments FOR INSERT WITH CHECK (true);
CREATE POLICY "Payments can be updated by all" ON payments FOR UPDATE USING (true);

-- Insert sample data
-- Accountant user
INSERT INTO users (id, email, name, password, role) VALUES 
('acc-001', 'accountant@fds.com', 'System Accountant', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'ACCOUNTANT');

-- Sample members with hashed passwords (password: member123)
INSERT INTO users (id, email, name, password, role) VALUES 
('mem-001', 'john@fds.com', 'John Doe', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'MEMBER'),
('mem-002', 'jane@fds.com', 'Jane Smith', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'MEMBER'),
('mem-003', 'bob@fds.com', 'Bob Johnson', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'MEMBER');

-- Insert member details
INSERT INTO members (id, name, email, phone, address, monthly_amount, total_paid, total_due, user_id) VALUES 
('mem-001', 'John Doe', 'john@fds.com', '+8801712345678', 'Dhaka, Bangladesh', 1000.00, 500.00, 500.00, 'mem-001'),
('mem-002', 'Jane Smith', 'jane@fds.com', '+8801812345678', 'Chittagong, Bangladesh', 1500.00, 1500.00, 0.00, 'mem-002'),
('mem-003', 'Bob Johnson', 'bob@fds.com', '+8801912345678', 'Rajshahi, Bangladesh', 2000.00, 1000.00, 1000.00, 'mem-003');

-- Insert sample payments
INSERT INTO payments (id, amount, payment_method, transaction_id, status, member_id, submitted_by, verified_by, verified_at) VALUES 
('pay-001', 500.00, 'BKASH', 'BKASH123456', 'APPROVED', 'mem-001', 'mem-001', 'acc-001', CURRENT_TIMESTAMP),
('pay-002', 1500.00, 'NAGAD', 'NAGAD789012', 'APPROVED', 'mem-002', 'mem-002', 'acc-001', CURRENT_TIMESTAMP),
('pay-003', 1000.00, 'CASH', NULL, 'PENDING', 'mem-003', 'mem-003', NULL, NULL);